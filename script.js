// Alap kateg√≥ri√°k (built-in)
const defaultCategories = [
  { value: "bev√©tel", label: "üí∞ Bev√©tel" },
  { value: "kiad√°s", label: "üõí Kiad√°s" },
  { value: "megtakar√≠t√°s", label: "üè¶ Megtakar√≠t√°s" }
];

// Egy√©ni kateg√≥ri√°k t√°rol√°sa
let customCategories = JSON.parse(localStorage.getItem("customCategories")) || [];

// Tranzakci√≥k t√°rol√°sa; minden tranzakci√≥ tartalmazza:
// description, amount, category, year, month
let transactions = JSON.parse(localStorage.getItem("transactions")) || [];

// Aktu√°lis id≈ë: √©v √©s h√≥nap
let currentDate = new Date();
let currentYear = currentDate.getFullYear();
let currentMonth = currentDate.getMonth(); // 0-index: 0 = janu√°r

// Magyar h√≥nap nevek
const monthNames = [
  "Janu√°r", "Febru√°r", "M√°rcius", "√Åprilis", "M√°jus", "J√∫nius",
  "J√∫lius", "Augusztus", "Szeptember", "Okt√≥ber", "November", "December"
];

// Seg√©df√ºggv√©ny az adatok ment√©s√©hez
function saveData() {
  localStorage.setItem("transactions", JSON.stringify(transactions));
  localStorage.setItem("customCategories", JSON.stringify(customCategories));
}

// Friss√≠ti a kateg√≥ria list√°t a <select> elemben
function updateCategoryList() {
  const categorySelect = document.getElementById("category");
  categorySelect.innerHTML = "";
  // Be√©p√≠tett kateg√≥ri√°k
  defaultCategories.forEach(cat => {
    const option = document.createElement("option");
    option.value = cat.value;
    option.textContent = cat.label;
    categorySelect.appendChild(option);
  });
  // Egy√©ni kateg√≥ri√°k (ikon: üìå)
  customCategories.forEach(cat => {
    const option = document.createElement("option");
    option.value = cat;
    option.textContent = `üìå ${cat}`;
    categorySelect.appendChild(option);
  });
}

// √öj egy√©ni kateg√≥ria hozz√°ad√°sa
function addCategory() {
  const newCatInput = document.getElementById("newCategory").value.trim();
  if (newCatInput === "") return;
  // Ellen≈ërz√©s: nem szerepel-e m√°r a be√©p√≠tett vagy egy√©ni list√°ban
  const existsDefault = defaultCategories.some(cat => cat.value === newCatInput.toLowerCase());
  const existsCustom = customCategories.includes(newCatInput);
  if (existsDefault || existsCustom) return;
  // Hozz√°ad√°s, elment√©s, majd a lista friss√≠t√©se
  customCategories.push(newCatInput);
  saveData();
  updateCategoryList();
  document.getElementById("newCategory").value = "";
}

// Ha az adott kateg√≥ria az egy√©ni kateg√≥ri√°k k√∂z√∂tt szerepel, tekintj√ºk kiad√°snak.
// Emellett a be√©p√≠tett "kiad√°s" kateg√≥ria is kiad√°s.
function isExpense(category) {
  return category === "kiad√°s" || customCategories.includes(category);
}

// √öj tranzakci√≥ hozz√°ad√°sa
function addTransaction() {
  const description = document.getElementById("description").value.trim();
  const amountInput = document.getElementById("amount").value.trim();
  const amount = parseFloat(amountInput);
  const category = document.getElementById("category").value;

  if (!description || isNaN(amount)) return;

  // Tranzakci√≥ objektum: tartalmazza a jelenlegi √©v √©s h√≥nap √©rt√©keit is
  const transaction = {
    description,
    amount,
    category,
    year: currentYear,
    month: currentMonth
  };
  transactions.push(transaction);
  saveData();
  updateUI();

  // ≈∞rlap mez≈ëk √ºr√≠t√©se
  document.getElementById("description").value = "";
  document.getElementById("amount").value = "";
}

// Friss√≠ti az UI-t: tranzakci√≥ lista, √∂sszegz√©s √©s aktu√°lis h√≥nap kijelz√©se
function updateUI() {
  const list = document.getElementById("transactions");
  list.innerHTML = "";
  let total = 0;
  // Csak az aktu√°lis √©v √©s h√≥nap tranzakci√≥i
  const monthlyTransactions = transactions.filter(t => t.year === currentYear && t.month === currentMonth);
  monthlyTransactions.forEach(t => {
    const li = document.createElement("li");
    let displayAmount = t.amount;
    if (isExpense(t.category)) {
      // Kiad√°sk√©nt jelen√≠tj√ºk meg negat√≠v √©rt√©kk√©nt √©s levonjuk az √∂sszegb≈ël
      displayAmount = -t.amount;
      total -= t.amount;
    } else {
      total += t.amount;
    }
    li.textContent = `${t.description} ‚Äì ${displayAmount} Ft (${t.category})`;
    list.appendChild(li);
  });

  document.getElementById("total").textContent = total;
  document.getElementById("currentMonth").textContent = `Aktu√°lis h√≥nap: ${monthNames[currentMonth]} ${currentYear}`;
  updateChart();
}

// Lapoz√°s az el≈ëz≈ë h√≥napra
function previousMonth() {
  if (currentMonth === 0) {
    currentMonth = 11;
    currentYear--;
  } else {
    currentMonth--;
  }
  updateUI();
}

// Lapoz√°s a k√∂vetkez≈ë h√≥napra
function nextMonth() {
  if (currentMonth === 11) {
    currentMonth = 0;
    currentYear++;
  } else {
    currentMonth++;
  }
  updateUI();
}

// Friss√≠ti a grafikont, mely a k√∂lt√©si szok√°sokat jelen√≠ti meg
function updateChart() {
  const canvas = document.getElementById("chart");
  const ctx = canvas.getContext("2d");
  // A canvas m√©ret√©nek be√°ll√≠t√°sa ‚Äì mobilon aj√°nlott dinamikusan m√©retezni
  canvas.width = Math.min(400, window.innerWidth - 40);
  canvas.height = canvas.width; // N√©gyzet alak√∫ diagram
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // Sz≈±r√©s: csak az aktu√°lis √©v √©s h√≥nap tranzakci√≥i, majd a kiad√°sok
  const monthlyTransactions = transactions.filter(t => t.year === currentYear && t.month === currentMonth);
  const spendingTransactions = monthlyTransactions.filter(t => isExpense(t.category));

  // √ñsszegz√©s kateg√≥ri√°nk√©nt
  let totals = {};
  spendingTransactions.forEach(t => {
    if (totals[t.category]) {
      totals[t.category] += t.amount;
    } else {
      totals[t.category] = t.amount;
    }
  });

  // A teljes kiad√°s √∂sszege
  let totalExpense = 0;
  for (let cat in totals) {
    totalExpense += totals[cat];
  }

  if (totalExpense === 0) {
    ctx.font = "16px Arial";
    ctx.fillStyle = "#333";
    ctx.textAlign = "center";
    ctx.fillText("Nincs el√©g adat a grafikonhoz", canvas.width / 2, canvas.height / 2);
    return;
  }

  // K√∂rdiagram rajzol√°sa
  let startAngle = 0;
  const colors = ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40", "#66FF66", "#FF6666"];
  let colorIndex = 0;
  for (let cat in totals) {
    let sliceAngle = (2 * Math.PI * totals[cat]) / totalExpense;
    ctx.beginPath();
    ctx.moveTo(canvas.width / 2, canvas.height / 2);
    ctx.arc(canvas.width / 2, canvas.height / 2,
            Math.min(canvas.width / 2, canvas.height / 2) - 20,
            startAngle, startAngle + sliceAngle);
    ctx.closePath();
    ctx.fillStyle = colors[colorIndex % colors.length];
    ctx.fill();

    // Felirat a szeletek k√∂zep√©re
    let midAngle = startAngle + sliceAngle / 2;
    let labelX = canvas.width / 2 + (Math.min(canvas.width, canvas.height) / 4) * Math.cos(midAngle);
    let labelY = canvas.height / 2 + (Math.min(canvas.width, canvas.height) / 4) * Math.sin(midAngle);
    ctx.fillStyle = "#000";
    ctx.font = "14px Arial";
    ctx.textAlign = "center";
    ctx.fillText(cat, labelX, labelY);

    startAngle += sliceAngle;
    colorIndex++;
  }
}

// S√∂t√©t m√≥d v√°lt√°sa gombbal
document.getElementById("toggleMode").addEventListener("click", function () {
  document.body.classList.toggle("dark-mode");
});

// Inicializ√°l√°s: kateg√≥ria lista felt√∂lt√©se √©s UI friss√≠t√©se
updateCategoryList();
updateUI();
